/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IHM;

import CODE.Equipement;
import CODE.Gamme;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author phili
 */
public class InterfaceGamme extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceGamme
     */
    public InterfaceGamme() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        GammesTitre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dGamme = new javax.swing.JTextField();
        refGamme = new javax.swing.JTextField();
        créerGamme = new javax.swing.JButton();
        supprimerGamme = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        DopTitre = new javax.swing.JLabel();
        RopTitre = new javax.swing.JLabel();
        dOperation = new javax.swing.JTextField();
        refOperation = new javax.swing.JTextField();
        equipementTitre = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        machine1 = new javax.swing.JRadioButton();
        machine2 = new javax.swing.JRadioButton();
        machine3 = new javax.swing.JRadioButton();
        machine4 = new javax.swing.JRadioButton();
        machine5 = new javax.swing.JRadioButton();
        machine6 = new javax.swing.JRadioButton();
        machine7 = new javax.swing.JRadioButton();
        machine8 = new javax.swing.JRadioButton();
        machine9 = new javax.swing.JRadioButton();
        machine10 = new javax.swing.JRadioButton();
        machine11 = new javax.swing.JRadioButton();
        machine12 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        poste1 = new javax.swing.JRadioButton();
        poste2 = new javax.swing.JRadioButton();
        poste3 = new javax.swing.JRadioButton();
        poste4 = new javax.swing.JRadioButton();
        poste5 = new javax.swing.JRadioButton();
        poste6 = new javax.swing.JRadioButton();
        poste7 = new javax.swing.JRadioButton();
        poste8 = new javax.swing.JRadioButton();
        poste9 = new javax.swing.JRadioButton();
        poste10 = new javax.swing.JRadioButton();
        poste11 = new javax.swing.JRadioButton();
        poste12 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        cout = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        buttonGroup.add(machine1);
        buttonGroup.add(machine2);
        buttonGroup.add(machine3);
        buttonGroup.add(machine4);
        buttonGroup.add(machine5);
        buttonGroup.add(machine6);
        buttonGroup.add(machine7);
        buttonGroup.add(machine8);
        buttonGroup.add(machine9);
        buttonGroup.add(machine10);
        buttonGroup.add(machine11);
        buttonGroup.add(machine12);
        buttonGroup.add(poste1);
        buttonGroup.add(poste2);
        buttonGroup.add(poste3);
        buttonGroup.add(poste4);
        buttonGroup.add(poste5);
        buttonGroup.add(poste6);
        buttonGroup.add(poste7);
        buttonGroup.add(poste8);
        buttonGroup.add(poste9);
        buttonGroup.add(poste10);
        buttonGroup.add(poste11);
        buttonGroup.add(poste12);

        GammesTitre.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        GammesTitre.setText("Gammes");

        jLabel1.setText("Désignation Gamme");

        jLabel2.setText("Référence Gamme");

        refGamme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refGammeActionPerformed(evt);
            }
        });

        créerGamme.setText("Créer");
        créerGamme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                créerGammeActionPerformed(evt);
            }
        });

        supprimerGamme.setText("Supprimer");
        supprimerGamme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerGammeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("Ajouter Opertation :");

        DopTitre.setText("Désignation de l'operation :");

        RopTitre.setText("Référence de l'operation :");

        equipementTitre.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        equipementTitre.setText("Equipement :");

        jLabel4.setText("Machines :");

        machine1.setText(Equipement.affichageMachine(1)
        );

        machine2.setText(Equipement.affichageMachine(2)
        );

        machine3.setText(Equipement.affichageMachine(3)
        );

        machine4.setText(Equipement.affichageMachine(4)
        );

        machine5.setText(Equipement.affichageMachine(5)
        );

        machine6.setText(Equipement.affichageMachine(6)
        );

        machine7.setText(Equipement.affichageMachine(7)
        );

        machine8.setText(Equipement.affichageMachine(8)
        );

        machine9.setText(Equipement.affichageMachine(9)
        );

        machine10.setText(Equipement.affichageMachine(10)
        );

        machine11.setText(Equipement.affichageMachine(11)
        );

        machine12.setText(Equipement.affichageMachine(12)
        );

        jLabel6.setText("Postes :");

        poste1.setText(Equipement.affichagePoste(1)
        );
        poste1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poste1ActionPerformed(evt);
            }
        });

        poste2.setText(Equipement.affichagePoste(2)
        );

        poste3.setText(Equipement.affichagePoste(3)
        );

        poste4.setText(Equipement.affichagePoste(4)
        );

        poste5.setText(Equipement.affichagePoste(5)
        );

        poste6.setText(Equipement.affichagePoste(5)
        );

        poste7.setText(Equipement.affichagePoste(7)
        );
        poste7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poste7ActionPerformed(evt);
            }
        });

        poste8.setText(Equipement.affichagePoste(8));

        poste9.setText(Equipement.affichagePoste(9)
        );

        poste10.setText(Equipement.affichagePoste(10));

        poste11.setText(Equipement.affichagePoste(11)
        );

        poste12.setText(Equipement.affichagePoste(12));

        jButton1.setText("Ajouter l'Equipement à l'operation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Cout horaire de l'opération");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GammesTitre)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dGamme, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                            .addComponent(refGamme))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(créerGamme)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(supprimerGamme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jLabel4)
                                                .addGap(105, 105, 105))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(machine1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(machine2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(machine3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(machine4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(machine5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(machine6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(machine9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(machine10, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(machine11, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(machine12, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(machine8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(machine7, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(DopTitre)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(RopTitre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cout)
                                            .addComponent(dOperation, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                            .addComponent(refOperation))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(poste12))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(poste11))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(poste10))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(poste9))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(poste8))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(poste1)
                                                .addGap(70, 70, 70)
                                                .addComponent(poste7)))
                                        .addGap(106, 106, 106))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(227, 227, 227))))))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(equipementTitre)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GammesTitre)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(dGamme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(refGamme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(créerGamme)
                            .addComponent(supprimerGamme))
                        .addGap(30, 30, 30)
                        .addComponent(equipementTitre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine1)
                                    .addComponent(machine7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine2)
                                    .addComponent(machine8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine3)
                                    .addComponent(machine9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine4)
                                    .addComponent(machine10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine5)
                                    .addComponent(machine11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(machine6)
                                    .addComponent(machine12)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(poste1)
                                    .addComponent(poste7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(poste2)
                                    .addComponent(poste8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(poste3)
                                    .addComponent(poste9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(poste4)
                                    .addComponent(poste10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(poste11, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(poste5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(poste6)
                                    .addComponent(poste12))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DopTitre, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RopTitre)
                            .addComponent(refOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refGammeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refGammeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refGammeActionPerformed

    private void créerGammeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_créerGammeActionPerformed
        try {
            Gamme.setGamme(dGamme.getText(),refGamme.getText());        //creation du fichier texte de la gamme
        } catch (IOException ex) {
            Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_créerGammeActionPerformed

    private void supprimerGammeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerGammeActionPerformed
    Gamme.supGamme(refGamme.getText(),dGamme.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_supprimerGammeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     if ((machine1.isSelected()==true)&&(!(machine1.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine1.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
     if ((machine2.isSelected()==true)&&(!(machine2.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine2.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine3.isSelected()==true)&&(!(machine3.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine3.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine4.isSelected()==true)&&(!(machine4.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine4.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine5.isSelected()==true)&&(!(machine5.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine5.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine6.isSelected()==true)&&(!(machine6.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine6.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine7.isSelected()==true)&&(!(machine7.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine7.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine8.isSelected()==true)&&(!(machine8.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine8.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }  
     if ((machine9.isSelected()==true)&&(!(machine9.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine9.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    } 
     if ((machine10.isSelected()==true)&&(!(machine10.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine10.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    } 
     if ((machine11.isSelected()==true)&&(!(machine11.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine11.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    } 
     if ((machine12.isSelected()==true)&&(!(machine12.getText().equals("vide")))){
         try {
             Gamme.addOperationMachine(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), machine12.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste1.isSelected()==true)&&(!(poste1.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste1.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste2.isSelected()==true)&&(!(poste2.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste2.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste3.isSelected()==true)&&(!(poste3.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste3.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste4.isSelected()==true)&&(!(poste4.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste4.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste5.isSelected()==true)&&(!(poste5.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste5.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste6.isSelected()==true)&&(!(poste6.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste6.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste7.isSelected()==true)&&(!(poste7.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste7.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste8.isSelected()==true)&&(!(poste8.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste8.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste9.isSelected()==true)&&(!(poste9.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste9.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste10.isSelected()==true)&&(!(poste10.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste10.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste11.isSelected()==true)&&(!(poste11.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste11.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
     if ((poste12.isSelected()==true)&&(!(poste12.getText().equals("vide")))){
         try {
             Gamme.addOperationPoste(dGamme.getText(), refGamme.getText(), dOperation.getText(), refOperation.getText(), poste12.getText(), cout.getText());       // TODO add your handling code here:
         } catch (IOException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(InterfaceGamme.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void poste1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poste1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_poste1ActionPerformed

    private void poste7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poste7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_poste7ActionPerformed
     
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceGamme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceGamme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceGamme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceGamme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceGamme().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DopTitre;
    private javax.swing.JLabel GammesTitre;
    private javax.swing.JLabel RopTitre;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JTextField cout;
    private javax.swing.JButton créerGamme;
    private javax.swing.JTextField dGamme;
    private javax.swing.JTextField dOperation;
    private javax.swing.JLabel equipementTitre;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton machine1;
    private javax.swing.JRadioButton machine10;
    private javax.swing.JRadioButton machine11;
    private javax.swing.JRadioButton machine12;
    private javax.swing.JRadioButton machine2;
    private javax.swing.JRadioButton machine3;
    private javax.swing.JRadioButton machine4;
    private javax.swing.JRadioButton machine5;
    private javax.swing.JRadioButton machine6;
    private javax.swing.JRadioButton machine7;
    private javax.swing.JRadioButton machine8;
    private javax.swing.JRadioButton machine9;
    private javax.swing.JRadioButton poste1;
    private javax.swing.JRadioButton poste10;
    private javax.swing.JRadioButton poste11;
    private javax.swing.JRadioButton poste12;
    private javax.swing.JRadioButton poste2;
    private javax.swing.JRadioButton poste3;
    private javax.swing.JRadioButton poste4;
    private javax.swing.JRadioButton poste5;
    private javax.swing.JRadioButton poste6;
    private javax.swing.JRadioButton poste7;
    private javax.swing.JRadioButton poste8;
    private javax.swing.JRadioButton poste9;
    private javax.swing.JTextField refGamme;
    private javax.swing.JTextField refOperation;
    private javax.swing.JButton supprimerGamme;
    // End of variables declaration//GEN-END:variables
}

